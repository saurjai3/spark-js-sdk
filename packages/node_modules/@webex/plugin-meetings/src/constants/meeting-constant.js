import bowser from 'bowser';

export const meetingStatus = {
  IDLE: 'IDLE',
  IN_COMING: 'IN_COMING',
  ON_GOING: 'ON_GOING',
  DIALING: 'DIALING',
  PENDING_DEVICE: 'PENDING_DEVICE',
  PRE_LOBBY: 'PRE_LOBBY',
  IN_LOBBY: 'IN_LOBBY',
  CONNECTING_MEDIA: 'CONNECTING_MEDIA',
  IN_MEETING: 'IN_MEETING',
  TERMINATING: 'TERMINATING',
  ENDED: 'ENDED'
};

export const MeetingInfoType = {
  SIP_URI: 'SIP_URI',
  MEETING_ID: 'MEETING_ID',
  LOCUS_ID: 'LOCUS_ID',
  PERSONAL_ROOM: 'PERSONAL_ROOM',
  MEETING_LINK: 'MEETING_LINK',
  ONE_ON_ONE: 'ONE_ON_ONE',
  MEDIA_SIP_URI: 'MEDIA_SIP_URI',
  CONVERSATION_URL: 'CONVERSATION_URL',
  TEMP_SIP_URI: 'TEMP_SIP_URI'
};

// TODO move media stats stuff to MediaStatsConstants
export const calls = {
  isChromeBrowser: bowser.chrome, // verify that the user's browser is chrome
  isEdgeBrowser: bowser.msedge, // verify that the user's browser is edge
  isSafariBrowser: bowser.safari, // verify that the user's browser is safari
  isFirefoxBrowser: bowser.firefox,
  isInternetExplorer: bowser.msie,
  // chrome 59 has all the fixes for webRTC support; 60 has the fix for video between Chrome and iOS
  isChromeWithH264: bowser.version >= 60,
  rtcConfiguration: {
    iceServers: []
  },
  videoIdealResolutionWidth: 640,
  videoIdealResolutionHeight: 480,
  videoMaxResolutionWidth: 640,
  videoMaxResolutionHeight: 480,
  rtcConfigurationFirefox: {
    iceServers: [],
    bundlePolicy: 'max-compat'
  },
  height: {
    min: '90',
    max: '1080'
  },
  frameRate: {
    min: '1',
    max: '3'
  },
  // december 2016 working draft for rtc stream stats
  // https://www.w3.org/TR/webrtc-stats/#streamstats-dict*
  // https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats
  // https://www.w3.org/TR/webrtc-stats/#dom-rtcoutboundrtpstreamstats
  // https://webrtc.github.io/samples/src/content/peerconnection/constraints/
  // https://w3c.github.io/webrtc-stats/#dom-rtcreceivedrtpstreamstats
  // https://w3c.github.io/webrtc-stats/#dom-rtcsentrtpstreamstats
  // RTP Synchronisation Source (SSRC)
  // https://w3c.github.io/webrtc-stats/#guidelines-for-implementing-stats-objects
  /*
      * Accurate as of 08/03/2017
      * chrome has some, firefox has some and some overlap
    */
  resiliencyStats: {
    // https://tools.ietf.org/html/rfc3550
    // Represents the total number of payload bytes sent on this RTCDatachannel,
    // i.e., not including headers or padding.
    // chr/ff
    bytesSent: 'bytes',
    // https://tools.ietf.org/html/rfc3550
    // Total number of RTP packets sent for this SSRC
    // chr/ff
    packetsSent: 'pkt',
    // https://tools.ietf.org/html/rfc3550
    // Total number of bytes received for this SSRC
    // https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats
    // chr/ff
    bytesReceived: 'bytes',
    // https://tools.ietf.org/html/rfc3550
    // Total number of RTP packets received for this SSRC
    // chr/ff
    packetsReceived: 'pkt',
    // https://tools.ietf.org/html/rfc3550
    // Packet Jitter measured in seconds for this SSRC
    // chr/ff
    jitter: 'jitter',
    // https://tools.ietf.org/html/rfc3550
    // Total number of RTP packets lost for this SSRC
    // ff
    packetsLost: 'lostPkt',
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1331134
    // non standard
    // ff
    framerateMean: 'fps',
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1331134
    // non standard
    // ff
    bitrateMean: 'br',
    // https://www.w3.org/TR/media-source/
    // Only valid for video. It is the total number of frames dropped predecode or dropped
    // because the frame missed its display deadline for this MediastreamTrack
    // ff
    droppedFrames: 'droppedFrames',
    // https://webrtcglossary.com/pli/
    // picture loss indication
    // https://tools.ietf.org/html/rfc4585
    // chr
    pliCount: 'pliCt',
    // https://webrtcglossary.com/nack/
    // negative acknowledgement
    // https://tools.ietf.org/html/rfc4585
    // chr
    nackCount: 'nackCt',
    // https://webrtcglossary.com/fir/
    // full intra request
    // https://tools.ietf.org/html/rfc5104
    // chr
    firCount: 'firCt',
    // https://www.w3.org/TR/webrtc-stats/#dom-rtcoutboundrtpstreamstats-framesencoded
    // Only valid for video. It represents the total number of frames successfully encoded for this RTP media stream.
    // chr
    framesEncoded: 'framesEnc',
    // https://www.w3.org/TR/webrtc-stats/#bib-MEDIA-SOURCE
    // Only valid for video and when remoteSource is set to true. It represents the total number of frames correctly
    // decoded for this MediaStreamTrack, independent of which SSRC it was received from
    // chr
    framesDecoded: 'framesDec',
    // https://tools.ietf.org/html/rfc7002
    // The cumulative number of RTP packets discarded by the jitter buffer due to late or early-arrival,
    // i.e., these packets are not played out.
    // ff
    discardedPackets: 'droppedPkt',
    // TODO this will need to change to activeConnection once browsers implement, for now chrome has this
    // implies if rtc connection is alive
    dtlsState: 'dtlsSt',
    // TODO update the stream track stats below for after june 2017 draft is implemented
    framesReceived: 'framesRec',
    framesDropped: 'framesDropped',
    framesSent: 'framesSent',
    framesPerSecond: 'fps'
    // TODO considering adding candidate-pair stats
    // (research for RTT if based on ICE connectivity or the actual packet RTT etc)
  },
  // outbound-rtp the outbound streams id for both firefox and chrome
  rtpStreamOutDirection: '^(?:RTC)?[Oo]utbound_?[Rr][Tt][Pp]_?',
  // inbound-rtp the inbound streams id for both firefox and chrome
  rtpStreamInDirection: '^(?:RTC)?[Ii]nbound_?[Rr][Tt][Pp]_?',
  // the track data for chrome receiver
  rtcStreamInDirection: '^RTCMediaStreamTrack_remote_',
  // the track data for chrome transceiver
  rtcStreamOutDirection: '^RTCMediaStreamTrack_local_',
  // the transport data for chrome
  rtcTransport: '^RTCTransport_',
  audioStream: '[Aa]udio',
  videoStream: '[Vv]ideo',
  track: 'track',
  transport: 'transport',
  rtpData: 'rtp',
  videoRender: {
    attributes: [
      'mozPaintedFrames',
      'webkitDecodedFrameCount'
    ]
  },
  eventDictFail: 2,
  eventDictStart: 0,
  eventDictStop: 1,
  eventDictionary: {
    getStats: {
      local: {
        videoTx: { // find the video transceiver object from get stats info
          rtpOutVideo: { // use the statistics from rtp stream stats
            packetsSent: ['mediaTxStart', 'mediaTxStop'] // when rtp packets start/stop flowing mapped to rtc getStats
          }
        }
      },
      remote: {
        videoRx: { // find the video receiver object from get stats info
          rtcInVideo: { // use the statistics from rtc stream stats
            framesDecoded: ['mediaRenderStart', 'mediaRenderStop'] // when frames are actually first rendered and first stopped rendering mapped to rtc getStats
          },
          rtpInVideo: { // use the statistics from rtp stream stats
            packetsReceived: ['mediaRxStart', 'mediaRxStop'] // when rtp packets are first received and last received mapped to rtc getStats
          }
        }
      }
    },
    ice: [
      'iceStart', // begin to collect ice candidates
      'iceStop', // stop collecting ice candidates either by timeout or completion or failure
      'iceFailed' // stop collecting ice candidates by failure, never will get iceStop
    ]
  },
  maxRecentCalls: 500,
  maxHistSize: 10
};

export const meetings = {
  supported: ((bowser.firefox && bowser.version >= 33) || (bowser.chrome && bowser.version >= 60)) || window.location.hostname === '127.0.0.1',
  isChromeBrowser: bowser.chrome, // verify that the user's browser is chrome
  isChromeWithH264: bowser.version >= 60, // chrome 60 has everything we need for webrtc support
  isSafariBrowser: bowser.safari, // verify that the user's browser is safari
  isSafariWithWebRTC: bowser.version >= 11.1, // safari 11.1 has everything we need for webrtc support
  audioBandwidthLimit: '64000',
  videoBandwidthLimit: '4000000',
  rtcConfiguration: {
    iceServers: []
  },
  rtcConfigurationFirefox: {
    iceServers: [],
    bundlePolicy: 'max-compat'
  },
  ringTimeout: 30000,
  controlsTimeout: 5000,
  bridgeTimeout: 7000,
  didNotAnswer: 3000,
  mediaInterval: 1000,
  iceTimeout: 1000,
  retryTimeout: 3000,
  convoListRosterLength: 7,
  maxRecentCalls: 500
};
