/* eslint require-jsdoc:0 */
import RoapHandler from './roap-handler';

// const MediaUtil from '../../utils/MediaUtil');
// import MeetingAdapter from '../meetings/meeting-adapter';
// import MeetingServerActionCreators from '../meetings/meeting-server-action-creators';

import RoapAdapter from './roap-adapter';
import RoapConstants from './roap-constants';

const RoapInterface = {
  // makeCall(options) {
  //   // TODO: find a suitable place for initialiation
  //   // registers for roap mercury event
  //   RoapAdapter.initialize();

  //   let requestBody = null;
  //   requestBody = {
  //     roapMessage: {
  //       messageType: RoapConstants.roapTypes.OFFER,
  //       sdps: options.sdp,
  //       version: '2',
  //       seq: (typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq))) ? 0 : options.roapSeq + 1,
  //       tieBreaker: 934563828 // TODO: Handle the roap glar scenario Math.floor(Math.random() * (2 ** 32) - 1)
  //     },
  //     audioMuted: false,
  //     videoMuted: false
  //   };

  //   RoapHandler.submit({
  //     type: RoapConstants.SEND_ROAP_MSG,
  //     msg: requestBody.roapMessage,
  //     correlationId: options.correlationId
  //   });

  //   return MeetingAdapter.sendMeetingRequest({
  //     locusUrl: options.locusUrl,
  //     roapMessage: requestBody,
  //     identifiers: options.identifiers,
  //     sipTarget: options.sipTarget,
  //     resource: options.resource,
  //     correlationId: options.correlationId,
  //   })
  //     .then((res) => {
  //       const {locus} = res.body;
  //       RoapHandler.submit({
  //         type: RoapConstants.SEND_ROAP_MSG_SUCCESS,
  //         seq: requestBody.roapMessage.seq,
  //         correlationId: options.correlationId
  //       });

  //       // TODO:  dont save the roapseq number here because when there is a
  //       // glar condition the peerconnection may get changed twice
  //       locus.roapSeq = requestBody.roapMessage.seq;
  //       // MediaUtil.setMetricCallback(self.reportSharing.bind(self, locus));
  //       return res;
  //     })
  //     .catch((error) => Promise.reject(error));
  // },
  sendRoapOK(options) {
    const meeting = window.meetings.get(options.correlationId);
    if (options.locusSelfId === undefined) {
      // There is a race conditation where the locus reasponce come after mercury event
      return;
    }

    const roapMessage = {
      messageType: RoapConstants.roapTypes.OK,
      version: '2',
      seq: options.seq
    };

    RoapAdapter.sendRoap({
      roapMessage,
      locusId: options.locusId,
      locusSelfId: options.locusSelfId,
      mediaId: options.mediaId,
      correlationId: options.correlationId
    })
      .then(() => {
        // TODO: need to check where to save the current seq number
        // MeetingServerActionCreators.selfChanged({ locus: locus });

        RoapHandler.submit({
          type: RoapConstants.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });

        meeting.updateRoapSeq(options.seq);
      });
  },

  // TODO: try to merge sendRoapOk and roapAnswer
  sendRoapAnswer(options) {
    let meeting = window.meetings.get(options.correlationId);
    const roapMessage = {
      messageType: RoapConstants.roapTypes.ANSWER,
      sdps: options.sdps,
      version: '2',
      seq: options.roapSeq
    };

    RoapAdapter.sendRoap({
      roapMessage,
      locusId: options.locusId,
      locusSelfId: options.locusSelfId,
      mediaId: options.mediaId,
      correlationId: options.correlationId
    })
      .then((/* locus */) => {
        meeting.updateRoapSeq(options.seq);
        RoapHandler.submit({
          type: RoapConstants.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });
      });
  },

  sendRoapError(session, locus, errorType) {
    const msg = {
      messageType: RoapConstants.roapTypes.ERROR,
      version: '2',
      errorType,
      seq: session.OFFER.seq
    };

    RoapAdapter.sendRoap(msg, locus);
  },

  resetRoap(correlationId) {
    RoapHandler.submit({
      type: RoapConstants.RECEIVE_CALL_LEAVE,
      correlationId
    });
  },

  sendRoapMediaRequest(options) {
    const {meeting} = options;
    const roapMessage = {
      messageType: RoapConstants.roapTypes.OFFER,
      sdps: options.sdps,
      version: '2',
      seq: (typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq))) ? 0 : options.roapSeq + 1,
      tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario
    };

    RoapHandler.submit({
      type: RoapConstants.SEND_ROAP_MSG,
      msg: roapMessage,
      correlationId: meeting.correlationId
    });

    return RoapAdapter.sendRoap({
      roapMessage,
      correlationId: meeting.correlationId,
      locusId: meeting.locusId,
      locusSelfId: meeting.selfId, // locusSelfId ???
      mediaId: meeting.mediaId,
      audioMuted: meeting.audioMuted,
      videoMuted: meeting.videoMuted
    })
      .then((locus) => {
        RoapHandler.submit({
          type: RoapConstants.SEND_ROAP_MSG_SUCCESS,
          seq: roapMessage.seq,
          correlationId: meeting.correlationId
        });
        meeting.updateRoapSeq(roapMessage.seq);
        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here
        // MeetingServerActionCreators.locusJoin(locus);
        // MediaUtil.setMetricCallback(self.reportSharing.bind(self, locus));
        return locus;
        // TODO: check where to update the sequence number
      });
  }
};

export default RoapInterface;
