import Dispatcher from '../../dispatcher/SquaredDispatcher';
// const MediaUtil from '../../utils/MediaUtil');
import MeetingAdapter from '../meetings/meeting-adapter';
import MeetingServerActionCreators from '../meetings/meeting-server-action-creators';

import RoapAdapter from './roap-adapter';
import RoapConstants from './roap-constants';

const RoapInterface = {
  makeCall(options) {
    // TODO: find a suitable place for initialiation
    // registers for roap mercury event
    RoapAdapter.initialize();

    let requestBody = null;
    requestBody = {
      roapMessage: {
        messageType: RoapConstants.roapTypes.OFFER,
        sdps: options.sdp,
        version: '2',
        seq: (typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq))) ? 0 : options.roapSeq + 1,
        tieBreaker: 934563828 // TODO: Handle the roap glar scenario Math.floor(Math.random() * (2 ** 32) - 1)
      },
      audioMuted: false,
      videoMuted: false
    };

    Dispatcher.handleViewAction({
      type: RoapConstants.SEND_ROAP_MSG,
      msg: requestBody.roapMessage,
      correlationId: options.correlationId
    });

    return MeetingAdapter.sendMeetingRequest({
      locusUrl: options.locusUrl,
      roapMessage: requestBody,
      identifiers: options.identifiers,
      sipTarget: options.sipTarget,
      resource: options.resource,
      correlationId: options.correlationId,
      hostPIN: options.hostPIN,
      password: options.password,
      moderator: options.moderator,
      moveCall: options.moveCall
    })
      .then((res) => {
        const {locus} = res.body;
        Dispatcher.handleServerAction({
          type: RoapConstants.SEND_ROAP_MSG_SUCCESS,
          seq: requestBody.roapMessage.seq,
          correlationId: options.correlationId
        });

        // TODO:  dont save the roapseq number here because when there is a
        // glar condition the peerconnection may get changed twice
        locus.roapSeq = requestBody.roapMessage.seq;
        // MediaUtil.setMetricCallback(self.reportSharing.bind(self, locus));
        return res;
      })
      .catch((error) => Promise.reject(error));
  },
  sendRoapOK(options) {
    if (options.locusSelfId === undefined) {
      // There is a race conditation where the locus reasponce come after mercury event
      return;
    }

    const roapMessage = {
      messageType: RoapConstants.roapTypes.OK,
      version: '2',
      seq: options.seq
    };

    RoapAdapter.sendRoap({
      roapMessage,
      locusId: options.locusId,
      locusSelfId: options.locusSelfId,
      mediaId: options.mediaId,
      correlationId: options.correlationId
    })
      .then(() => {
        // TODO: need to check where to save the current seq number
        // MeetingServerActionCreators.selfChanged({ locus: locus });

        Dispatcher.handleViewAction({
          type: RoapConstants.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });

        MeetingServerActionCreators.ROAP_UPDATE_SEQ(options.correlationId, options.seq);
      });
  },

  // TODO: try to merge sendRoapOk and roapAnswer
  sendRoapAnswer(options) {
    const roapMessage = {
      messageType: RoapConstants.roapTypes.ANSWER,
      sdps: options.sdps,
      version: '2',
      seq: options.roapSeq
    };

    RoapAdapter.sendRoap({
      roapMessage,
      locusId: options.locusId,
      locusSelfId: options.locusSelfId,
      mediaId: options.mediaId,
      correlationId: options.correlationId
    })
      .then((/* locus */) => {
        MeetingServerActionCreators.ROAP_UPDATE_SEQ(options.correlationId, options.roapSeq);
        Dispatcher.handleServerAction({
          type: RoapConstants.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });
      });
  },

  sendRoapError(session, locus, errorType) {
    const msg = {
      messageType: RoapConstants.roapTypes.ERROR,
      version: '2',
      errorType,
      seq: session.OFFER.seq
    };

    RoapAdapter.sendRoap(msg, locus);
  },

  resetRoap(correlationId) {
    Dispatcher.handleServerAction({
      type: RoapConstants.RECEIVE_CALL_LEAVE,
      correlationId
    });
  },

  sendRoapMediaRequest(options) {
    const roapMessage = {
      messageType: RoapConstants.roapTypes.OFFER,
      sdps: options.sdps,
      version: '2',
      seq: (typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq))) ? 0 : options.roapSeq + 1,
      tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario
    };

    Dispatcher.handleViewAction({
      type: RoapConstants.SEND_ROAP_MSG,
      msg: roapMessage,
      correlationId: options.correlationId
    });

    return RoapAdapter.sendRoap({
      roapMessage,
      correlationId: options.correlationId,
      locusId: options.locusId,
      locusSelfId: options.locusSelfId,
      mediaId: options.mediaId,
      audioMuted: options.audioMuted,
      videoMuted: options.videoMuted
    })
      .then((locus) => {
        Dispatcher.handleServerAction({
          type: RoapConstants.SEND_ROAP_MSG_SUCCESS,
          seq: roapMessage.seq,
          correlationId: options.correlationId
        });
        MeetingServerActionCreators.ROAP_UPDATE_SEQ(options.correlationId, options.roapSeq);
        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here
        // MeetingServerActionCreators.locusJoin(locus);
        // MediaUtil.setMetricCallback(self.reportSharing.bind(self, locus));
        return locus;
        // TODO: check where to update the sequence number
      });
  }
};

export default RoapInterface;
