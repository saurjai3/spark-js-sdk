/* eslint require-jsdoc:0 */

import {StatelessSparkPlugin} from '@ciscospark/spark-core';
import Promise from 'bluebird';

import {ROAP, EVENTS} from '../constants';
import MeetingCollection from '../meetings/collection';
import Events from '../events';

import RoapHandler from './handler';
import RoapRequest from './request';

export default class Roap extends StatelessSparkPlugin {
  constructor(attrs, options) {
    super({}, options);

    this.roapHandler = new RoapHandler({}, options);
    this.roapRequest = new RoapRequest({}, options);

    Events.on(EVENTS.ROAP_OK, this.sendRoapOK.bind(this));
    Events.on(EVENTS.ROAP_ANSWER, this.sendRoapAnswer.bind(this));
  }

  start() {
    return Promise.try(() => {
      this.spark.internal.mercury.on(ROAP.ROAP_MERCURY, (result) => {
        const msg = result.data.message;
        const {correlationId} = result.data;
        console.info(`Call-Mercury->-App: receives Roap Message [${JSON.stringify(msg, null, 2)}]`);
        this.roapHandler.submit({
          type: ROAP.RECEIVE_ROAP_MSG,
          msg,
          correlationId
        });
      });
    });
  }

  sendRoapOK(options) {
    const meeting = MeetingCollection.get(options.correlationId);
    if (options.locusSelfId === undefined) {
      // TODO: There is a race conditation where the locus response comes after mercury event
      return;
    }

    const roapMessage = {
      messageType: ROAP.ROAP_TYPES.OK,
      version: ROAP.ROAP_VERSION,
      seq: options.seq
    };

    this.roapRequest
      .sendRoap({
        roapMessage,
        locusId: options.locusId,
        locusSelfId: options.locusSelfId,
        mediaId: options.mediaId,
        correlationId: options.correlationId
      })
      .then(() => {
        // TODO: need to check where to save the current seq number

        this.roapHandler.submit({
          type: ROAP.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });

        meeting.setRoapSeq(options.seq);
      });
  }

  // TODO: try to merge sendRoapOk and roapAnswer
  sendRoapAnswer(options) {
    const meeting = MeetingCollection.get(options.correlationId);
    const roapMessage = {
      messageType: ROAP.ROAP_TYPES.ANSWER,
      sdps: options.sdps,
      version: ROAP.ROAP_VERSION,
      seq: options.roapSeq
    };

    this.roapRequest
      .sendRoap({
        roapMessage,
        locusId: options.locusId,
        locusSelfId: options.locusSelfId,
        mediaId: options.mediaId,
        correlationId: options.correlationId
      })
      .then((/* locus */) => {
        meeting.setRoapSeq(options.seq);
        this.roapHandler.submit({
          type: ROAP.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });
      });
  }

  sendRoapError(session, locus, errorType) {
    const msg = {
      messageType: ROAP.ROAP_TYPES.ERROR,
      version: ROAP.ROAP_VERSION,
      errorType,
      seq: session.OFFER.seq
    };

    this.roapRequest.sendRoap(msg, locus);
  }

  resetRoap(correlationId) {
    this.roapHandler.submit({
      type: ROAP.RECEIVE_CALL_LEAVE,
      correlationId
    });
  }

  sendRoapMediaRequest(options) {
    const {meeting} = options;
    const roapMessage = {
      messageType: ROAP.ROAP_TYPES.OFFER,
      sdps: options.sdps,
      version: ROAP.ROAP_VERSION,
      seq: typeof options.roapSeq !== 'number' && Number.isNaN(parseFloat(options.roapSeq)) ? 0 : options.roapSeq + 1,
      tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario
    };

    this.roapHandler.submit({
      type: ROAP.SEND_ROAP_MSG,
      msg: roapMessage,
      correlationId: meeting.correlationId
    });

    return this.roapRequest
      .sendRoap({
        roapMessage,
        correlationId: meeting.correlationId,
        locusId: meeting.locusId,
        locusSelfId: meeting.selfId, // locusSelfId ???
        mediaId: meeting.mediaId,
        audioMuted: meeting.audioMuted,
        videoMuted: meeting.videoMuted
      })
      .then((locus) => {
        this.roapHandler.submit({
          type: ROAP.SEND_ROAP_MSG_SUCCESS,
          seq: roapMessage.seq,
          correlationId: meeting.correlationId
        });
        meeting.setRoapSeq(roapMessage.seq);
        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here
        return locus;
        // TODO: check where to update the sequence number
      });
  }
}
