/* eslint require-jsdoc:0 */
/* globals window */
import {noop} from 'lodash';

// import MeetingUtil from '../meetings/meeting-util';
import Promise from 'bluebird';

import RoapHandler from './roap-handler';
import RoapConstant from './roap-constants';

const config = window;
const RoapAdapater = {
  initialize() {
    this.initialize = noop;

    return Promise.try(() => {
      // Make sure this method can only have an effect once.
      // roap messages
      window.spark.internal.mercury.on('event:locus.message.roap', (result) => {
        const msg = result.data.message;

        // TODO: not going to use locusID any more
        // var locusId = result.data.locusId;
        const {correlationId} = result.data;
        config.console.info(`Call-Mercury->-App: receives Roap Message [${JSON.stringify(msg, null, 2)}]`);
        RoapHandler.submit({
          type: RoapConstant.RECEIVE_ROAP_MSG,
          msg,
          correlationId
        });
      });
    });
  },

  joinMeetingWithRoap(options) {
    const self = this;
    config.console.info('Call->Locus: Join locus with roap');
    config.console.info('Call-local SDP', options.roapMessage);
    const deviceUrl = window.spark.internal.device.url;
    let url = '';

    const body = {
      deviceUrl,
      usingResource: options.resourceId || null,
      correlationId: options.correlationId,
      localMedias: [
        {
          localSdp: JSON.stringify({
            roapMessage: options.roapMessage,
            audioMuted: false,
            videoMuted: false
          })
        }
      ]
    };

    if (options.locusUrl) {
      url = `${options.locusUrl}/participant`;
    }
    else {
      url = `${window.spark.internal.device.services.locusServiceUrl}/loci/call`;
      body.invitee = {
        address: options.sipTarget
      };
    }

    return window.spark
      .request({
        method: 'POST',
        uri: url,
        body
      })
      .then((res) => {
        const {locus} = res.body;
        locus.roapSeq = options.roapMessage.seq;
        locus.id = locus.url.split('/').pop();
        config.console.info(`Call-Locus->App: Joined locus [${locus.id}][${locus.fullState.lastActive}]`);
        return locus;
      })
      .catch((err) => {
        config.console.error('joinMeetingWithRoap : ', err);
        self.logError('MeetingAdapter#joinMeetingWithRoap failed', err);
        return Promise.reject(err);
      });
  },

  logError(message, error) {
    // Throw the exception so we can get a call stack
    if (process.env.NODE_ENV === 'development') {
      config.console.error(message);
      throw error;
    }
    else {
      config.console.error(message, error);
    }
  },

  // To report Call failure and send a cancel metric most of the time ,Should be
  // End in future
  // TODO: discussion going on calling scrum
  // reportCallFailure(locus, err, customToast) {
  //   const self = this;
  //   MeetingUtil
  //     .getToastMessage(err)
  //     .then((toast) => {
  //       /* istanbul ignore else */
  //       if (toast.sendMetrics) {
  //         self.reportMeetingMetrics({locus, error: err, toast});
  //       }

  //       window.spark
  //         .internal
  //         .feature
  //         .getFeature('developer', 'upload-call-logs')
  //         .then((uploadLogs) => {
  //           /* istanbul ignore else */
  //           if (uploadLogs) {
  //             const logs = {
  //               locusId: locus.id,
  //               callStart: locus.fullState.lastActive,
  //               spaceId: locus.spaceId
  //             };
  //             // TODO: Remove if condition after roap compelete
  //             /* istanbul ignore else */
  //             // change to pass meeting
  //             // if (locus.clientIdentifiers) {
  //             //     logs.correlationId = locus.clientIdentifiers.correlationId;
  //             // }
  //             // do we need to send correlationId here?
  //             self.submitMeetingLogs(logs);
  //           }
  //         });

  //       // if there is an error then send joinFail and failure toast
  //       const toastMessage = customToast || toast.toastMessage;
  //       /* istanbul ignore else */
  //       if (err && typeof err === 'object') {
  //         MeetingServerActionCreators.receiveJoinFail(locus);
  //         err.uri = locus.url;
  //         self.sendCallFailedToast(toastMessage, locus);
  //         config
  //           .console
  //           .error(`App->Locus: Join locus failed [${locus.id}][${locus.fullState.lastActive}]`, err);
  //       }
  //     });
  // },

  sendRoap(options) {
    const {
      roapMessage, locusId, locusSelfId, correlationId
    } = options;
    if (!options.mediaId) {
      config.console.info('Race Condition /call mediaID not present');
    }
    const mediaUrl = `loci/${locusId}/participant/${locusSelfId}/media`;
    config.console.info(`Call-sendRoap: ${mediaUrl} \n ${roapMessage.messageType} \n seq:${roapMessage.seq}`);
    const deviceUrl = window.spark.internal.device.url;
    return window.spark
      .request({
        api: 'locus',
        resource: mediaUrl,
        method: 'PUT',
        body: {
          deviceUrl,
          correlationId,
          localMedias: [
            {
              localSdp: JSON.stringify({
                roapMessage,
                // TODO: check whats the need for video and audiomute
                audioMuted: !!options.audioMuted,
                videoMuted: !!options.audioVideo
              }),
              mediaId: options.mediaId
            }
          ]
        }
      })
      .then((res) => {
        // always it will be the first mediaConnection Object
        const mediaConnection
          = res.body.mediaConnections && res.body.mediaConnections.length > 0 && res.body.mediaConnections[0];
        config.console.info(
          `Call-sendRoap:response:${JSON.stringify(mediaConnection, null, 2)}'\n StatusCode:'${res.statusCode}`
        );
        const {locus} = res.body;
        locus.roapSeq = options.roapMessage.seq;
        return locus;
      })
      .catch((error) => {
        config.console.error(`Call-sendRoap Error:${JSON.stringify(error, null, 2)}`);
        config.console.error(
          `Call-sendRoap errorBody:${JSON.stringify(roapMessage, null, 2)} + '\\n mediaId:'${options.mediaId}`
        );
        throw new Error(error);
      });
  }
};

export default RoapAdapater;
