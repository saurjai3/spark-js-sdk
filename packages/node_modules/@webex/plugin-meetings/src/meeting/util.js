const MeetingUtil = {};

MeetingUtil.parseLocus = (response) => {
  const parsed = {};
  // First todo: add check for existance
  parsed.locus = response.body.locus;
  parsed.mediaConnections = response.body.mediaConnections;
  parsed.locusUrl = parsed.locus.url;
  parsed.locusId = parsed.locus.url.split('/').pop();
  parsed.selfId = parsed.locus.self.id;

  // we need mediaId before making roap calls
  parsed.mediaConnections.forEach((mediaConnection) => {
    if (mediaConnection.mediaId) {
      parsed.mediaId = mediaConnection.mediaId;
    }
  });
  return parsed;
};

MeetingUtil.joinMeeting = (meeting) => {
// TODO: check if the meeting is in JOINING state
// if JOining state termintate the request as user might click multiple times
  if (meeting) {
    return meeting.request.joinMeeting({
      sipUri: meeting.sipUri,
      deviceUrl: meeting.deviceUrl,
      locusUrl: meeting.locusUrl,
      correlationId: meeting.id
    }).then((res) => {
      // TODO: was thinking to have one function for parsing
      // all updates will give a locus object and we just need to
      // update the existing locus object and send events to the UI
      const locusResponse = MeetingUtil.parseLocus(res);
      return Promise.resolve(locusResponse);
    }).catch((err) => {
      console.log('Meeting:index#joinMeeting --> Error joining the call on joinMeeting request, ', err);
      throw err;
    });
  }
  return Promise.reject();
};

export default MeetingUtil;
