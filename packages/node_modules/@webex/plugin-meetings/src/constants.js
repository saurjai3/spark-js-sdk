export const MEETINGS = 'Meetings';
export const AUDIO = 'audio';
export const VIDEO = 'video';
export const RETRY_TIMEOUT = 3000;
export const AUDIO_BANDWIDTH_LIMIT = '64000';
export const VIDEO_BANDWIDTH_LIMIT = '4000000';
export const ICE_TIMEOUT = 1000;
export const RTC_CONFIGURATION_FIREFOX = {iceServers: [], bundlePolicy: 'max-compat'};
export const RTC_CONFIGURATION = {iceServers: []};
export const AUDIOINPUT = 'audioinput';
export const VIDEOINPUT = 'videoinput';
export const SIP_URI = 'SIP_URI';
export const MEETING_ID = 'MEETING_ID';
export const LOCUS_ID = 'LOCUS_ID';
export const PERSONAL_ROOM = 'PERSONAL_ROOM';
export const MEETING_LINK = 'MEETING_LINK';
export const ONE_ON_ONE = 'ONE_ON_ONE';
export const MEDIA_SIP_URI = 'MEDIA_SIP_URI';
export const CONVERSATION_URL = 'CONVERSATION_URL';
export const TEMP_SIP_URI = 'TEMP_SIP_URI';
export const WEBEX_DOT_COM = 'webex.com';
export const LOCUS = 'locus';
export const GET = 'GET';
export const PUT = 'PUT';
export const POST = 'POST';
export const USE_URI_LOOKUP_FALSE = 'useUriLookup=false';
export const TYPE = 'type';
export const LOCI = 'loci';
export const MEETINGINFO = 'meetingInfo';
export const ALTERNATE_REDIRECT_TRUE = 'alternateRedirect=true';
export const PARTICIPANT = 'participant';
export const CALL = 'call';
export const DEVELOPMENT = 'development';
export const MEDIA = 'media';
export const ERROR = 'ERROR';
export const CONFLICT = 'CONFLICT';
export const IDLE = 'IDLE';
export const OFFER = 'OFFER';
export const REQUESTED = 'REQUESTED';
export const ANSWER = 'ANSWER';
export const _ANSWER_ = 'answer';
export const MEETING_STATE_MACHINE = {
  TRANSITIONS: {
    ERROR: 'error',
    START: 'start',
    JOIN: 'join',
    LOCAL: 'local',
    CONNECT: 'connect',
    ESTABLISH: 'establish',
    LEAVE: 'leave',
    END: 'end',
    CLEAN: 'clean'
  },
  STATES: {
    IDLE: 'IDLE',
    INCOMING: 'INCOMING',
    DIALING: 'DIALING',
    ON_GOING: 'ON_GOING',
    CONNECTING_MEDIA_LOCAL: 'CONNECTING_MEDIA_LOCAL',
    CONNECTING_MEDIA_REMOTE: 'CONNECTING_MEDIA_REMOTE',
    ESTABLISHED_MEDIA: 'ESTABLISHED_MEDIA',
    TERMINATING: 'TERMINATING',
    ENDED: 'ENDED',
    ERROR: 'ERROR'
  }
};
export const SDP = {
  A_CONTENT_SLIDES: 'a=content:slides',
  ROLLBACK: 'rollback',
  HAVE_LOCAL_OFFER: 'have-local-offer',
  STABLE: 'stable',
  OFFER: 'offer',
  M_LINE: 'm=',
  MAX_FS_8160: 'max-fs=8160',
  B_LINE: 'b=TIAS',
  CARRIAGE_RETURN: '\r\n',
  BAD_MEDIA_PORTS: [9, 0]
};
export const ROAP = {
  ROAP_TRANSITIONS: {
    STEP: 'step'
  },
  ROAP_TYPES: {
    OFFER: 'OFFER',
    ANSWER: 'ANSWER',
    OK: 'OK',
    ERROR: 'ERROR',
    SHUTDOWN: 'SHUTDOWN',
    OFFER_REQUEST: 'OFFER_REQUEST'
  },
  ROAP_STATE: {
    INIT: 'INIT',
    WAIT_RX_OFFER: 'WAIT_RX_OFFER',
    WAIT_RX_ANSWER: 'WAIT_RX_ANSWER',
    WAIT_RX_OK: 'WAIT_RX_OK',
    WAIT_TX_OFFER: 'WAIT_TX_OFFER',
    WAIT_TX_ANSWER: 'WAIT_TX_ANSWER',
    WAIT_TX_OK: 'WAIT_TX_OK',
    IDLE_LOCAL_OFFER: 'IDLE_LOCAL_OFFER',
    IDLE_REMOTE_OFFER: 'IDLE_REMOTE_OFFER',
    GLARE: 'GLARE',
    ERROR: 'ERROR'
  },
  ROAP_SIGNAL: {
    RX_OFFER: 'RX_OFFER',
    TX_OFFER: 'TX_OFFER',
    RX_ANSWER: 'RX_ANSWER',
    TX_ANSWER: 'TX_ANSWER',
    RX_OK: 'RX_OK',
    TX_OK: 'TX_OK',
    GLARE_RESOLVED: 'GLARE_RESOLVED'
  },
  RECEIVE_ROAP_MSG: 'RECEIVE_ROAP_MSG',
  SEND_ROAP_MSG: 'SEND_ROAP_MSG',
  SEND_ROAP_MSG_SUCCESS: 'SEND_ROAP_MSG_SUCCESS',
  RESET_ROAP_STATE: 'RESET_ROAP_STATE',
  RECEIVE_CALL_LEAVE: 'RECEIVE_CALL_LEAVE',
  ROAP_MERCURY: 'event:locus.message.roap',
  ROAP_VERSION: '2',
  RX_: 'RX_',
  TX_: 'TX_'
};

export const EVENTS = {
  ROAP_OK: 'ROAP_OK',
  ROAP_ANSWER: 'ROAP_ANSWER'
};
