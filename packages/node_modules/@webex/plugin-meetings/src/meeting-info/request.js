/* eslint-disable require-jsdoc */

import btoa from 'btoa';

import {MeetingInfoType} from '../constants/meeting-constant';

function checkforMeetingLink(value) {
  const regex = /\/\/(.*).webex.com\/meet\/(.*)/;
  const m = regex.exec(value);
  let sipUrl = null;

  if (m !== null && m.length === 3) {
    // The result can be accessed through the `m`-variable.
    sipUrl = `${m[2]}@${m[1]}.webex.com`;
  }

  return sipUrl;
}

function getResourceUrl(type, value) {
  let resource = '/loci/meetingInfo';
  let method = 'GET';
  switch (type) {
    case MeetingInfoType.SIP_URI:
    case MeetingInfoType.PERSONAL_ROOM:
    case MeetingInfoType.MEETING_ID:
      resource = `/loci/meetingInfo/${value}?type=${type}&useUriLookup=false`;
      break;
    case MeetingInfoType.CONVERSATION_URL:
      method = 'PUT';
      break;
    case MeetingInfoType.LOCUS_ID:
      // if locus id just send PUT request
      resource = `/loci/${value}/meetingInfo`;
      method = 'PUT';
      break;
    case MeetingInfoType.MEETING_LINK:
      resource = `/loci/meetingInfo/${btoa(value)}?type=MEETING_LINK&useUriLookup=false`;
      break;
    default:
  }
  return {
    resource,
    method
  };
}

class MeetingInfoRequest {
  constructor({spark, logger}) {
    this.spark = spark;
    this.logger = logger;
  }

  getMeetingInfo(destination) {
    let value = destination;
    let type = 'SIP_URI';

    // Making sure all the webEx meeting are converted into SipUrl
    const sipUrl = checkforMeetingLink(value);

    if (sipUrl) {
      type = MeetingInfoType.SIP_URI;
      value = sipUrl;
    }

    const resourceOptions = getResourceUrl(type, value);

    const requestParams = {
      method: resourceOptions.method,
      api: 'locus',
      resource: resourceOptions.resource
    };

    if (resourceOptions.method === 'GET') {
      // for handling URL redirections
      requestParams.resource = requestParams.resource.concat('&alternateRedirect=true');
    }
    else if (type !== MeetingInfoType.LOCUS_ID) {
      // locus id check is a PUT not sure why
      requestParams.body = {
        value,
        lookupType: type,
        alternateRedirect: true
      };
    }

    return this.spark.request(requestParams).catch((err) =>
      // console.error('', object);// "errorCode": 2404003, "message": "Locus Meeting Information not found";
      Promise.reject(err));
  }
}

export default MeetingInfoRequest;
