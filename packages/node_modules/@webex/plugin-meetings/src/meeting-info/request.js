// TODO: remove this;
/* eslint require-jsdoc:0 */
/* globals window */

import btoa from 'btoa';

import * as MeetingConstants from '../constants/meeting-constant.js';

export default {
  checkforMeetingLink(value) {
    const regex = /\/\/(.*).webex.com\/meet\/(.*)/;
    const m = regex.exec(value);
    let sipUrl = null;

    if (m !== null && m.length === 3) {
      // The result can be accessed through the `m`-variable.
      sipUrl = `${m[2]}@${m[1]}.webex.com`;
    }

    return sipUrl;
  },

  getResourceUrl(options) {
    const {type, value} = options;
    let resource = '/loci/meetingInfo';
    let method = 'GET';
    switch (type) {
      case MeetingConstants.MeetingInfoType.SIP_URI:
      case MeetingConstants.MeetingInfoType.PERSONAL_ROOM:
      case MeetingConstants.MeetingInfoType.MEETING_ID:
        resource = `/loci/meetingInfo/${value}?type=${type}&useUriLookup=false`;
        break;
      case MeetingConstants.MeetingInfoType.CONVERSATION_URL:
        method = 'PUT';
        break;
      case MeetingConstants.MeetingInfoType.LOCUS_ID:
        // if locus id just send PUT request
        resource = `/loci/${value}/meetingInfo`;
        method = 'PUT';
        break;
      case MeetingConstants.MeetingInfoType.MEETING_LINK:
        resource = `/loci/meetingInfo/${btoa(value)}?type=MEETING_LINK&useUriLookup=false`;
        break;
      default:
    }
    return {
      resource,
      method
    };
  },

  // The get meeting info now only takes 2 values
  // {value: `locusId`, type: 'LOCUS_ID}
  // Type value can be found in MeetingConstants.MeetingInfoType
  requestMeetingInfo(options) {
    const {type, value} = options;
    const {correlationId} = options;

    // Making sure all the webEx meeting are converted into SipUrl
    const sipUrl = this.checkforMeetingLink(options);

    if (sipUrl) {
      options.type = MeetingConstants.MeetingInfoType.SIP_URI;
      options.value = sipUrl;
    }

    const resourceOptions = this.getResourceUrl(options);

    const requestParams = {
      method: resourceOptions.method,
      api: 'locus',
      resource: resourceOptions.resource
    };

    if (resourceOptions.method === 'GET') {
      // for handling URL redirections
      requestParams.resource = requestParams.resource.concat('&alternateRedirect=true');
    }
    else if (type !== MeetingConstants.MeetingInfoType.LOCUS_ID) {
      // locus id check is a PUT not sure why
      requestParams.body = {
        value,
        lookupType: type,
        alternateRedirect: true
      };
    }

    return window.spark.request(requestParams).catch((err) =>
      // console.error('', object);// "errorCode": 2404003, "message": "Locus Meeting Information not found";
      Promise.reject(err));
  }
};
